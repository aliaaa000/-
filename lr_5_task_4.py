# -*- coding: utf-8 -*-
"""Lr_5_task_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Xqe0vDgj_Kk0KBquv0fxIH7vRNwXh0H
"""

import numpy as np
import matplotlib.pyplot as plt
!pip install neurolab

import neurolab as nl

# Load input data
text = np.loadtxt('data_simple_nn.txt')

# Split data into data points and labels
data = text[:, 0:2]
labels = text[:, 2:4]

# Plot input data points
plt.figure()
plt.scatter(data[:, 0], data[:, 1])
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.title('Input Data')

# Determine the minimum and maximum values for each dimension
dim1_min, dim1_max = data[:, 0].min(), data[:, 0].max()
dim2_min, dim2_max = data[:, 1].min(), data[:, 1].max()

# Define the number of neurons in the output layer
num_output = labels.shape[1]

# Define a single-layer neural network using the provided parameters
dim1 = [dim1_min, dim1_max]
dim2 = [dim2_min, dim2_max]
nn = nl.net.newp([dim1, dim2], num_output)

# Train the network on training data
error_progress = nn.train(data, labels, epochs=100, show=20, lr=0.03)

# Plot the training error progress
plt.figure()
plt.plot(error_progress)
plt.xlabel('Number of epochs')
plt.ylabel('Training error')
plt.title('Change in training error')
plt.grid()
plt.show()

# Define some sample test data points and run the neural network for them
print('Test results:')
data_test = [[0.4, 4.3], [4.4, 0.6], [4.7, 8.1]]
for item in data_test:
    print(item, '-->', nn.sim([item])[0])