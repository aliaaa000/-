# -*- coding: utf-8 -*-
"""Lr_6_task_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LRK90g0WvrJIe8wAldKk3RYNEysgGlBe
"""

import numpy as np
!pip install neurolab
import neurolab as nl

# Matrices for each letter
П = np.asfarray([[1, 1, 1],
                 [1, 0, 0],
                 [1, 1, 1],
                 [1, 0, 0],
                 [1, 0, 0]])

А = np.asfarray([[0, 1, 0],
                 [1, 0, 1],
                 [1, 1, 1],
                 [1, 0, 1],
                 [1, 0, 1]])

О = np.asfarray([[0, 1, 0],
                 [1, 0, 1],
                 [1, 0, 1],
                 [1, 0, 1],
                 [0, 1, 0]])

# Combine matrices and characters
target_name = np.vstack((П.flatten(), А.flatten(), О.flatten()))

# Convert 0s to -1s
target_name[target_name == 0] = -1

# Create and train network
net_name = nl.net.newhop(target_name)

# Test on each letter
chars = ['П', 'А', 'О']
for i, letter in enumerate([П, А, О]):
    letter_test = letter.flatten()
    letter_test[letter_test == 0] = -1
    output = net_name.sim([letter_test])
    print(f"Test on {chars[i]}:", (output[0] == target_name[i]).all())

# Test with errors in one letter (e.g., flipping a pixel)
П_noisy = П.flatten()
П_noisy[3] = -П_noisy[3]  # Flip one pixel
output_noisy = net_name.sim([П_noisy])
print("Test on defaced П:", (output_noisy[0] == target_name[0]).all())