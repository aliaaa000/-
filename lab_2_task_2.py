# -*- coding: utf-8 -*-
"""Lab_2_task_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jAES0pA8hOsGZP4PCHrzk1H2xxHyiHFt
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.svm import SVC
import pandas as pd


# Завантаження даних
df = pd.read_csv('income_data.txt', names=['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status',
                                           'occupation', 'relationship', 'race', 'sex', 'capital_gain', 'capital_loss',
                                           'hours_per_week', 'native_country', 'income'])

# Перетворення даних в формат NumPy
X = df.drop('income', axis=1)
y = df['income']

# Перетворення рядкових даних на числові
label_encoder = []
X_encoded = np.empty(X.shape)

for i, item in enumerate(X.iloc[0]):
    if isinstance(item, (int, np.int64, np.int32, np.int16, np.int8)):
        X_encoded[:, i] = X.iloc[:, i].astype(int)
    else:
        label_encoder.append(preprocessing.LabelEncoder())
        X_encoded[:, i] = label_encoder[-1].fit_transform(X.iloc[:, i])

X = X_encoded
y = label_encoder[-1].fit_transform(y)


# Поділ на навчальний і тестовий набори (знову, якщо це не вже зроблено)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

# Створення класифікатора з поліноміальним ядром
poly_classifier = SVC(kernel='poly', degree=8, C=1)
poly_classifier.fit(X_train, y_train)

# Створення класифікатора з гаусовим ядром
rbf_classifier = SVC(kernel='rbf', C=1)
rbf_classifier.fit(X_train, y_train)

# Створення класифікатора з сигмоїдальним ядром
sigmoid_classifier = SVC(kernel='sigmoid', C=1)
sigmoid_classifier.fit(X_train, y_train)

# Передбачення для тестового набору
y_test_pred_poly = poly_classifier.predict(X_test)
y_test_pred_rbf = rbf_classifier.predict(X_test)
y_test_pred_sigmoid = sigmoid_classifier.predict(X_test)

# Обчислення показників якості для поліноміального ядра
accuracy_poly = accuracy_score(y_test, y_test_pred_poly)
precision_poly = precision_score(y_test, y_test_pred_poly)
recall_poly = recall_score(y_test, y_test_pred_poly)
f1_poly = f1_score(y_test, y_test_pred_poly)

# Обчислення показників якості для гаусового ядра
accuracy_rbf = accuracy_score(y_test, y_test_pred_rbf)
precision_rbf = precision_score(y_test, y_test_pred_rbf)
recall_rbf = recall_score(y_test, y_test_pred_rbf)
f1_rbf = f1_score(y_test, y_test_pred_rbf)

# Обчислення показників якості для сигмоїдального ядра
accuracy_sigmoid = accuracy_score(y_test, y_test_pred_sigmoid)
precision_sigmoid = precision_score(y_test, y_test_pred_sigmoid)
recall_sigmoid = recall_score(y_test, y_test_pred_sigmoid)
f1_sigmoid = f1_score(y_test, y_test_pred_sigmoid)

# Виведення результатів
print("Results for Polynomial Kernel:")
print(f"Accuracy: {accuracy_poly}")
print(f"Precision: {precision_poly}")
print(f"Recall: {recall_poly}")
print(f"F1: {f1_poly}")
print("\n")

print("Results for RBF Kernel:")
print(f"Accuracy: {accuracy_rbf}")
print(f"Precision: {precision_rbf}")
print(f"Recall: {recall_rbf}")
print(f"F1: {f1_rbf}")
print("\n")

print("Results for Sigmoid Kernel:")
print(f"Accuracy: {accuracy_sigmoid}")
print(f"Precision: {precision_sigmoid}")
print(f"Recall: {recall_sigmoid}")
print(f"F1: {f1_sigmoid}")