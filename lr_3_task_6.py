# -*- coding: utf-8 -*-
"""Lr_3_task_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1z3OXRQnSn8cuy3CMHTsIHTN9NwAt_e
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

np.random.seed(42)
m = 100
X = np.linspace(-3, 3, m)
y = np.sin(X) + np.random.uniform(-0.5, 0.5, m)
X = X.reshape(-1, 1)

degree = 2
poly_features = PolynomialFeatures(degree=degree)
X_poly = poly_features.fit_transform(X)
X_train, X_val, y_train, y_val = train_test_split(X_poly, y, test_size=0.2, random_state=42)

lin_reg = LinearRegression()

train_errors, val_errors = [], []

for m_train in range(1, len(X_train) + 1):
    lin_reg.fit(X_train[:m_train], y_train[:m_train])

    y_train_pred = lin_reg.predict(X_train[:m_train])

    y_val_pred = lin_reg.predict(X_val)

    train_errors.append(mean_squared_error(y_train[:m_train], y_train_pred))
    val_errors.append(mean_squared_error(y_val, y_val_pred))

plt.plot(np.sqrt(train_errors), label='Training Set')
plt.plot(np.sqrt(val_errors), label='Validation Set')
plt.title(f'Learning Curves - Polynomial Degree {degree}')
plt.xlabel('Training Set Size')
plt.ylabel('Root Mean Squared Error')
plt.legend()
plt.show()