# -*- coding: utf-8 -*-
"""Lab_2_task_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ExCwQnuIEsS6xGsOkjfjztJUoXSGWnsM
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.svm import SVC
import pandas as pd

# Вхідний файл, який містить дані
input_file = 'income_data.txt'

# Читання даних
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 25000

with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        data = line[:-1].split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data)
            count_class1 += 1
        elif data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data)
            count_class2 += 1

# Перетворення на масив numpy
X = np.array(X)

# Перетворення рядкових даних на числові
label_encoder = []
X_encoded = np.empty(X.shape)

for i, item in enumerate(X[0]):
    if item.isdigit():
        X_encoded[:, i] = X[:, i].astype(int)
    else:
        label_encoder.append(preprocessing.LabelEncoder())
        X_encoded[:, i] = label_encoder[-1].fit_transform(X[:, i])

X = X_encoded[:, :-1]
y = X_encoded[:, -1]

# Створення SVМ-класифікатора
classifier = OneVsOneClassifier(LinearSVC(random_state=0))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)

classifier.fit(X_train, y_train)

y_test_pred = classifier.predict(X_test)

# Обчислення F-міри для SVМ-класифікатора
f1 = cross_val_score(classifier, X, y, scoring='f1_weighted', cv=3)
print("F1 score: " + str(round(100 * f1.mean(), 2)) + "%")

# Передбачення результату для тестової точки даних
input_data = ['37', 'Private', '215646', 'HS-grad', '9', 'Never-married', 'Handlers-cleaners', 'Not-in-family',
              'White', 'Male', '0', '0', '40', 'United-States']

# Кодування тестової точки даних
input_data_encoded = [-1] * len(input_data)
count = 0

for i, item in enumerate(input_data):
    if item.isdigit():
        input_data_encoded[i] = int(input_data[i])
    else:
        input_data_encoded[i] = int(label_encoder[count].transform([input_data[i]]))
        count += 1

input_data_encoded = np.array(input_data_encoded)

# Обчислення інших показників якості класифікації
accuracy = accuracy_score(y_test, y_test_pred)
precision = precision_score(y_test, y_test_pred, average='weighted')
recall = recall_score(y_test, y_test_pred, average='weighted')

print("Accuracy: " + str(round(100 * accuracy, 2)) + "%")
print("Precision: " + str(round(100 * precision, 2)) + "%")
print("Recall: " + str(round(100 * recall, 2)) + "%")

# Використання класифікатора для кодованої точки даних
predicted_class = classifier.predict([input_data_encoded])
predicted_class = np.expand_dims(predicted_class, axis=1)



# Завантаження даних
df = pd.read_csv('income_data.txt', names=['age', 'workclass', 'fnlwgt', 'education', 'education_num', 'marital_status',
                                           'occupation', 'relationship', 'race', 'sex', 'capital_gain', 'capital_loss',
                                           'hours_per_week', 'native_country', 'income'])

# Перетворення даних в формат NumPy
X = df.drop('income', axis=1)
y = df['income']

# Перетворення рядкових даних на числові
label_encoder = []
X_encoded = np.empty(X.shape)

for i, item in enumerate(X.iloc[0]):
    if isinstance(item, (int, np.int64, np.int32, np.int16, np.int8)):
        X_encoded[:, i] = X.iloc[:, i].astype(int)
    else:
        label_encoder.append(preprocessing.LabelEncoder())
        X_encoded[:, i] = label_encoder[-1].fit_transform(X.iloc[:, i])

X = X_encoded
y = label_encoder[-1].fit_transform(y)


# Розділення даних на навчальний і тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Створення та тренування класифікатора з поліноміальним ядром
poly_classifier = SVC(kernel='poly', degree=3, C=1)
poly_classifier.fit(X_train, y_train)

# Створення та тренування класифікатора з гаусовим ядром
rbf_classifier = SVC(kernel='rbf', C=1)
rbf_classifier.fit(X_train, y_train)

# Створення та тренування класифікатора з сигмоїдальним ядром
sigmoid_classifier = SVC(kernel='sigmoid', C=1)
sigmoid_classifier.fit(X_train, y_train)

# Передбачення для тестового набору
y_test_pred_poly = poly_classifier.predict(X_test)
y_test_pred_rbf = rbf_classifier.predict(X_test)
y_test_pred_sigmoid = sigmoid_classifier.predict(X_test)

# Обчислення показників якості для поліноміального ядра
accuracy_poly = accuracy_score(y_test, y_test_pred_poly)
precision_poly = precision_score(y_test, y_test_pred_poly)
recall_poly = recall_score(y_test, y_test_pred_poly)
f1_poly = f1_score(y_test, y_test_pred_poly)

# Обчислення показників якості для гаусового ядра
accuracy_rbf = accuracy_score(y_test, y_test_pred_rbf)
precision_rbf = precision_score(y_test, y_test_pred_rbf)
recall_rbf = recall_score(y_test, y_test_pred_rbf)
f1_rbf = f1_score(y_test, y_test_pred_rbf)

# Обчислення показників якості для сигмоїдального ядра
accuracy_sigmoid = accuracy_score(y_test, y_test_pred_sigmoid)
precision_sigmoid = precision_score(y_test, y_test_pred_sigmoid)
recall_sigmoid = recall_score(y_test, y_test_pred_sigmoid)
f1_sigmoid = f1_score(y_test, y_test_pred_sigmoid)

# Виведення результатів
print("Results for Polynomial Kernel:")
print(f"Accuracy: {accuracy_poly}")
print(f"Precision: {precision_poly}")
print(f"Recall: {recall_poly}")
print(f"F1: {f1_poly}")
print("\n")

print("Results for RBF Kernel:")
print(f"Accuracy: {accuracy_rbf}")
print(f"Precision: {precision_rbf}")
print(f"Recall: {recall_rbf}")
print(f"F1: {f1_rbf}")
print("\n")

print("Results for Sigmoid Kernel:")
print(f"Accuracy: {accuracy_sigmoid}")
print(f"Precision: {precision_sigmoid}")
print(f"Recall: {recall_sigmoid}")
print(f"F1: {f1_sigmoid}")